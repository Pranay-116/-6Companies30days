class Solution {
public:
typedef long long ll;
ll cnt=0;
  void f(int start,int mid,int end,vector<int>&c,int diff)
  {
      int l=start,r=mid+1;
      while(l<=mid&&r<=end)
      {
          if(c[l]<=c[r]+diff)
          {
              cnt+=(end-r+1);
              l++;


          }
          else
          r++;
      }
      sort(c.begin()+start,c.begin()+end+1);
      return;
  }
   void mergeSort(int s,int e,vector<int>&c,int diff)
   {
       if(s>=e)
       return;
       int mid=(s+(e-s)/2);
       mergeSort(s,mid,c,diff);
       mergeSort(mid+1,e,c,diff);
       f(s,mid,e,c,diff);
   }
    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        vector<int>c(nums1.size());
        for(int i=0;i<nums1.size();i++)
        c[i]=nums1[i]-nums2[i];
        mergeSort(0,nums1.size()-1,c,diff);
        return cnt;
    }
};
similar to reverse pair and inversion count practice those also