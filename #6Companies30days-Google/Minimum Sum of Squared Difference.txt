class Solution {
public:
typedef long long int ll;
bool isPossible(vector<int>&v,int mid,int k)
{
    ll total=0;
    for(int i=0;i<v.size();i++)
   {
       if(v[i]>mid)
       {
           total+=v[i]-mid;
       }
 
   }
         return total<=k;

}
    long long minSumSquareDiff(vector<int>& nums1, vector<int>& nums2, int k1, int k2) {
        int n=nums1.size();
        vector<int>v(n);
        for(int i=0;i<n;i++)
        v[i]=abs(nums1[i]-nums2[i]);
        int  low=0;
        int high=*max_element(v.begin(),v.end());
        int ans=0;
        int k=k1+k2;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(isPossible(v,mid,k))
            {
              ans=mid;
              high=mid-1;

            }
            else
            low=mid+1;

        }
        ll res=0;
        for(ll i=0;i<n;i++)
        {
           if(v[i]>ans&&k>0)
           {
               int diff=v[i]-ans;
               k-=diff;
               v[i]-=diff;
           }
        }
        priority_queue<int>pq;
        for(int i=0;i<n;i++)
        {
            if(v[i]>0)
            pq.push(v[i]);
        }
        while(k>0&&pq.size()>0)
        {
            int l=pq.top();
            pq.pop();
            l--;
            if(l>0)
            pq.push(l);
            k--;
        }
       while(pq.size()>0)
       {
           ll x=pq.top();
           res+=x*x;
           pq.pop();
       }
       return res;



        
    }
};