class Solution {
public:
void dfs(int i,int j,int n,int m,vector<vector<int>>&grid)
{
    if(i<0||i>=n||j<0||j>=m||grid[i][j]==1)
    return;
   // c++;
    grid[i][j]=1;
    dfs(i+1,j,n,m,grid);
     dfs(i-1,j,n,m,grid);
      dfs(i,j+1,n,m,grid);
      dfs(i,j-1,n,m,grid);

}
void dfs1(int i,int j,int n,int m,vector<vector<int>>&grid,int&c)
{
    if(i<0||i>=n||j<0||j>=m||grid[i][j]==1)
    return;
    c++;
    grid[i][j]=1;
    dfs1(i+1,j,n,m,grid,c);
     dfs1(i-1,j,n,m,grid,c);
      dfs1(i,j+1,n,m,grid,c);
      dfs1(i,j-1,n,m,grid,c);

}
    int closedIsland(vector<vector<int>>& grid) {
          int n=grid.size();
          int m=grid[0].size();
          for(int i=0;i<m;i++)
          {
              if(grid[0][i]==0)
              {
                  dfs(0,i,n,m,grid);
              }

          }
           for(int i=0;i<m;i++)
          {
              if(grid[n-1][i]==0)
              {
                  dfs(n-1,i,n,m,grid);
              }

          }
          for(int i=1;i<n-1;i++)
          {
              if(grid[i][0]==0)
              {
                  dfs(i,0,n,m,grid);
              }
          }
             for(int i=1;i<n-1;i++)
          {
              if(grid[i][m-1]==0)
              {
                  dfs(i,m-1,n,m,grid);
              }
          }
        //         for(int i=0;i<n;i++)
        //   {
        //       for(int j=0;j<m;j++)
        //       {
        //         cout<<grid[i][j]<<" ";
        //       }
        //       cout<<endl;
        //   }

          int cnt=0;
          for(int i=0;i<n;i++)
          {
              for(int j=0;j<m;j++)
              {
                  if(grid[i][j]==0)
                  {
                      int c=0;
                      dfs1(i,j,n,m,grid,c);
                      if(c!=0)
                      cnt+=1;
                  }
              }
          }
          return cnt;


        
    }
};