class Solution {
public:
   bool isValid(string s)
   {
       stack<char>st;
       st.push('$');
       int len=s.length();
       for(int i=0;i<len;i++)
       {
         if(s[i]=='(')
         st.push(s[i]);
         else
         {
             if(s[i]==')')
             {
                 if(st.top()=='(')
                 st.pop();
                  else
             return false;
             }
            
         }
       }
       return st.top()=='$';

   }
    vector<string> removeInvalidParentheses(string t) {
        vector<string>ans;
        if(isValid(t))
        {
            ans.push_back(t);
            return ans;
        }
        queue<string>q;
        q.push(t);
        set<string>st;
        st.insert(t);
        bool f=1;
        while(q.size()>0)
        {
            auto x=q.front();
            q.pop();
            if(isValid(x))
            {
                ans.push_back(x);
                f=0;
            }
            if(f==0)
            continue;
            for(int i=0;i<x.length();i++)
            {
                if(x[i]=='('||x[i]==')'){
                string s1=x.substr(0,i);
                string s2=x.substr(i+1);
                string final=s1+s2;
                if(st.find(final)==st.end())
                {
                    q.push(final);
                    st.insert(final);
                }
                }
            }
        }
        return ans;
    }
};